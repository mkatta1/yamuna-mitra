Let us start with Hello World using AWS Lambda. We will use Python3 as a runtime environment.

Go to AWS Console and use the Lambda template.

Deploy and Test and make sure it is successful.

Here are the default names that are used.

Program Name: lambda_function

Function Name: lambda_handler

We can change the names of the file, function etc. However, we need to ensure that Handler details as part of Runtime Settings are updated.

Let us rename the file name to main.py and validate. We will revert the name back to lambda_function.py

download the ghactivity from git into s3 later we deploy
create a virtual envi :ghad-venv:
activate using "source ghad-venv/bin/activate"
Use request library to download files from ghactivity 
Use boto3 to upload data into s3

mkdir ghacivity-downloader
cd ghactivity-downloader
python3 -m venv ghad-venv
source ghad-venv/bin/activate
pip install request
pip install boto3



lambda_function:

import json
import boto3

def lambda_handler(event, context):
 #TODO implement
 return {
     'statusCode': 200,
     'body': json.dumps('Hello from Lambda!')
   }

> Now click on Deploy and then click on Test
> Also instead of boto3 try to use "import requests" if it fails then go to understand that the "requests" is not available as part of the python3 runtime environment as part AWS infrastructure.

> mkdir ghalib

This Ghalib makes sure all the libraries needed to deployed into AWS LAMBDA CONSOLE will go into this folder. We can also install the dependencies using > pip install requests -t ghalib
check if the libraries are available > ls -ltr Ghalib


NOW GO TO PYCHARM -> new project -> 
itversity ->projects->internal->bootcamp->itversity-material->data-engineering-on-aws->ghactivity-downloader->click on open

configure the appropriate python interpreter:
click on configure python interpreter -> interpreter settings -> click show all runtime environment in the settings & know the current runtime version pointing to. IF IT IS NOT POINTING TO THE RIGHT ONE then click on plus symbol -> Virtualenv Environment choose new/existing environment

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
[Instructions and Code] Setup Project for local development
Here are the steps using which we can set up a project. We will use this project to download the GitHub Activity files in incremental fashion.

Create folder for the project - ghactivity-downloader

Create virtual environment for this project - ghad-venv

python3 -m venv ghad-venv
source ghad-venv/bin/activate
We will install boto3 in the default location within the virtual environment. We need not include it as part of the bundle that will be deployed as a lambda function.

pip install boto3
pip install requests
We will install requests as part of lambdalib folder. It will be included as part of the bundle that will be deployed as a lambda function.

mkdir ghalib
pip install requests -t ghalib
We can create lambda_function.py with the default code we got when we get started.

import json
 
def lambda_handler(event, context):
    # TODO implement
    return {
        'statusCode': 200,
        'body': json.dumps('Hello from Lambda using gha downloader!')
    }
We will create an additional file lambda_validate.py and have this piece of code so that we can run locally.

from lambda_function import lambda_handler
 
res = lambda_handler(None, None)
print(res)
We can run lambda_validate to validate locally.

python lambda_validate.py

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

To create a hello world program:
right click on ghactivity-downloader -> new -> python file -> name it as lambda_function.py

import json
def lambda_handler(event, context):
 #TODO implement
 return {
  'statusCode': 200,
  'body': json.dumps('Hellow from Lambda!')
   }

To do unit test of the above code create a lambda_validate file:
right click on ghactivity-downloader -> new -> python file -> name it as lambda_validate.py

#invoke the lambda_handler function
from lambda_function import lamdba_handler
res = lambda_handler(None, None)
print(res)

TO ZOOM IN THE CONTENT PyCharm -> preferences -> Editor -> Font -> Size=24 , apply and ok -> RUN LAMBDA VALIDATE

TO DEPLOY THE CODE CLICK ON TERMINAL at the bottom tab ->
ghactivity-downloader zip -r ghacitivity-downloader.zip lambda_function.py

NOW GO TO LAMBDA WEBSITE -> CLICK ON UPLOAD .ZIP FILE -> upload from the local device.

TO UPLOAD THE UPDATED ZIP FILE ->
ghactivity-downloader zip -g ghactivity-downloader.zip lambda_function.py AGAIN DO THE UPLOAD PROCESS

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

[Instructions and Code] Deploy Project to AWS Lambda console
Let us understand how we can deploy the locally developed Lambda Function to AWS Lambda Web Console.

You need to build the zip file with the source code.

zip -r ghactivity-downloader.zip lambda_function.py

Use AWS Lambda Web Console to upload the Zip file.

You can review the source code in Python scripts and test the function by creating a test event.

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

DEVELOP DOWNLOAD FUNCTIONALITY USING REQUESTS:

Right click on ghactivity-downloader->new->python file-> download.py

# It will download whatever we passed to this below function
# We download from gharchive website so, get the url from it!
import requests

def download_file(file):
  res = requests.get(f'https://data.gharchive.org/{file}')
  return res

#invoke the download_file specify the filename,  download the file with this name

res = download_file('2021-01-29-0.json.gz')
print(res.status_code)

NOW LET'S INVOKE THIS FUNCTION FROM THE LAMBDA HANDLER

import json
from download import download_file

def lambda_handler(event, context):
 download_res = download_file('2021-01-29-0.json.gz')
 return {
    'statusCode': 200,
    'body': json.dumps('download status code')
  }

NOW RUN THE LAMBDA_VALIDATE.py to test the code
REMOVE THE old ZIP FILE AND AGAIN ZIP THE UPDATED ZIP FILE

> rm ghactivity-downloader.zip
> zip -r ghactivity-downloader.zip lambda_function.py download.py

IN LAMBDA CONSOLE, create function -> function name: ghactivity-downloader, Runtime: python 3.8  -> actions -> upload the zip file

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
[Instructions and Code] Develop download functionality using requests
Let us develop the download functionality using requests and validate locally. We will understand how to integrate 3rd party libraries as part of the next topic using requests as an example.

Develop the base functionality to download the zip file using requests library. I have created a new program called download.py for this.

import requests
 
def download_file(file):
  res = requests.get(f'https://data.gharchive.org/{file}')
  return res
Refactor the code as part of lambda_function.py to invoke the new function and also to capture the response.

import json
from download import download_file
 
def lambda_handler(event, context):
  download_res = download_file('2021-01-29-0.json.gz')
  return {
    'statusCode': download_res.status_code,
    'body': json.dumps('Download status code')
  }

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

USING 3rd PARTY LIBRARIES in AWS Lambda

Remove the old zip file and go to the Ghalib where it has all the libraries needed to execute. We can do this either creating the ZIP file in the parent folder OR create the ZIP file in the current folder -> move it to parent folder

rm ghactivity-downloader.zip
cd ghalib
zip -r ../ghactivity-downloader.zip .
ghactivity-downloader ls -ltr
zip -g ghactivity-downloader.zip lambda_function.py downloader.py
zip -r ghactivity-downloader.zip Ghalib

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

Basic settings -> 256/512 MB -> save and test the code

[Instructions and Code] Using 3rd party libraries in AWS Lambda
Let us understand how to include 3rd party libraries as part of the zip file that will be deployed as lambda function.

You need to ensure that all the 3rd party libraries which are supposed to be deployed along with lambda functions are downloaded to a folder. In our case it is ghalib.

We need to go to the folder to build the zip file. Make sure the zip file is created in the base directory of the project and update the zip file with source code.

rm ghactivity-downloader.zip
cd ghalib
zip -r ../ghactivity-downloader.zip .
cd ..
zip -g ghactivity-downloader.zip lambda_function.py download.py
We can upload the zip file to AWS Lambda console and validate successfully. Make sure to increase memory size to 512 MB as demonstrated.

$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$

Validating s3 access for local development


 





















