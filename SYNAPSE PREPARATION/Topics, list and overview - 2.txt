***NOTE:
SECTION 13: Serverless SQL POOL - Data Transformation
Watch videos from 77 to 82 for the project details

************************************************* Serverless SQL POOL - DATA Ingestion: ************************************************* 

CREATE EXTERNAL TABLE AS SELECT (CETAS):

1) Write the data in Columnar format
2) Remove unwanted columns like PIA or personal information of clients etc..
3) Transform semi-structured data (eg. JSON)
4) Store pre-aggregated data (to reduce latency)
5) Build a traditional data warehouse

CETAS creates an external table rather than a standard table 

		CREATE EXTERNAL TABLE
		AS
		SELECT
       /--\				\
	||				 \

SELECT(+joins, aggs,trans)		External Table
			    \			\
       /--\		     \		External Data Source
	||			\	/ External File Format
				  \
OPENROWSET,VIEW,EXTERNAL TABLE	   \		\
       /--\			    \		 \
	||			    \/		
Data Lake Storage(raw)			DataLakeStorage(Transformed)
	


CREATE EXTERNAL TABLE {[DB.][SCHE][]}
[column_names...]
WITH
(
  LOCATION = ,
  DATA_SOURCE = ,
  FILE_FORMAT = 
)
AS
<select_statement>
;

Example:
CREATE EXTERNAL TABLE 
WITH (
	LOCATION = 'transformed/taxi_zone',
	DATA_SOURCE = nyc_taxi_data,
	FILE_FORMAT = parquet_file_format
)
AS
SELECT *
FROM
OPENROWSET(
	BULK 'abfss://nyc-taxi-data@synapsecoursedl.dfs.core.windows.net/raw/taxi_zone.csv',
	FORMAT = 'CSV',
	PARSER_VERSION = '2.0',
	FIRSTROW = 2
)
WITH(
	location_id SMALLINT 1,
	borough	VARCAHR(15) 2,

) AS [result];


-- Transform to Parquet:

USE nyc_taxi_ldw;

IF OBJECT_ID('silver.taxi_zone') IS NOT NULL
 DROP EXTERNAL TABLE silver.taxi_zone
GO

CREATE EXTERNAL TABLE silver.taxi_zone
 WITH
 (
	DATA_SOURCE = nyc_taxi_src,
	LOCATION = 'silver/taxi_zone',
	FILE_FORMAT = parquet_file_format
)
AS
SELECT *
FROM bronze.taxi_zone;


-- Transform JSON to Parquet:

USE nyc_taxi_ldw
GO

-- Create view for rate code file
DROP VIEW IF EXISTS bronze.vw_rate_code
GO

CREATE VIEW bronze.vw_rate_Code
AS
SELECT rate_code_id, rate_code
FROM OPENROWSET(
	BULK 'raw/rate_code.json',
	DATA_SOURCE = 'nyc_taxi_src',
	FORMAT = 'CSV',
	FIELDTERMINATOR = '0x0b',
	FIELDQUOTE = '0x0b',
	ROWTERMINATOR = '0x0b'
)
WITH
(
	jsonDoc NVARCHAR(MAX)
) AS rate_code
CROSS APPLY OPENJSON(jsonDoc)
WITH(
	rate_code_id TINYINT,
	rate_code VARCHAR (20)
)
GO 

SELECT * FROM bronze.vw_rate_code
GO

IF OBJECT_ID('silver.rate_code') IS NOT NULL
 DROP EXTERNAL TABLE silver.rate_code
GO

CREATE EXTERNAL TABLE silver.rate_code
	WITH
	(
	  DATA_SOURCE = nyc_taxi_src,
	  LOCATION = 'silver/rate_code',
	  FILE_FORMAT = parquet_file_format
	)
AS
SELECT * 
FROM bronze.vendor;

SELECT * FROM silver.vendor;


Transform to Parquet Format - Partitioned Files:

Stored Procedure - CETAS to transform data
Stored Procedure - DROP External Tables
Execute store procedure for each partition


-- Transform Partitioned Data to Parquet:
Transform Partitioned Data - Solution
Transform Partitioned Data - Solution Lab

USE nyc_taxi_ldw
GO

CREATE OR ALTER PROCEDURE silver.usp_silver_trip_data_green
@year	VARCHAR(4),
@month	VARCHAR(2)
AS
BEGIN
 DECLARE @create_sql_stmt NVARCHAR(MAX),
	 @drop_sql_stmt NVARCHAR(MAX);

SET @create_sql_stmt =
	'CREATE EXTERNAL TABLE silver.trip_data_green_'+@year+'_'+ @month +
	' WITH
	    (
		DATA_SOURCE = nyc_taxi_src,
		LOCATION = 'silver/trip_data_green/year=' +@year +'/month=' +@month + ''',
		FILE_FORMAT = parquet_file_format
		)
	AS
	SELECT *
	FROM bronze.vw_trip_data_green_csv
	WHERE year = ''' + @year + '''
	  AND month = ''' + @month + '''';
	
	print(@create_sql_stmt)
	
	EXEC sp_executesql @create_sql_stmt;

	SET @drop_sql_stmt = 
		'DROP EXTERNAL TABLE silver.trip_data_green_' +@year + '_'+ @month;

print (@drop_sql_stmt_
EXEC sp_executesql @drop_sql_stmt;
END;



--- Create View:

USE nyc_taxi_ldw
GO

-- Create view for trip_data_green
DROP VIEW IF EXISTS silver.vw_trip_data_green
GO

CREATE VIEW silver.vw_trip_data_green
AS
SELECT
	result.filepath(1) AS year,
	result.filepath(2) AS month,
	result.*
FROM
	OPENROWSET(
	BULK '',
	DATA_SOURCE = '',
	FORMAT = 'PARQUET'
	)
	WITH (
		INT,
		DATETIME(7),
		DATETIME2(7)
)
so on.....

Business Requirements
	Campaign to encourage credit card payments
		Trips made using credit card/ cash payments
		Payment behaviour during days of the week/weekend
		Payment behaviour between boroughs
		Reporting data to be pre-aggregated for better performance
		Pre-aggregate data for each year/ month partition in isolation
		Able to read data efficiently for specific months from aggregated data
		Minimize the number of aggregated tables created

CashTripCount	CardTripCount	TripDate
TripDay		TripDayWeekEndInd	Borough
Year	Month	TripData TaxiZone	Calendar	DerivedFromTripDay
PaymentType+TripData

SECTION 13: Serverless SQL POOL - Data Transformation
Watch videos from 77 to 82 for the project details


Serverless SQL POOL - DATA Transformation (select stmt, stored procedure, create view, Assignment)

Synapse Pipelines & Triggers:
100+ Native connectors, SaaS connectors (like SalesForce, office365 etc..), Multi-cloud support, On-premises support, Serverless&Auto Scale, ControlFlow Activities.

Synapse DataFlows, DedicatedSQL Pools, ServerlessSQL pools, Spark Notebooks, HDInsight Scripts, ML pipelines

Check your camera photos!!

Bronze to Silver Layer Transformation:
----------------------------------------
Taxi Zone			Trip Type
	  ==== Trip Data === 	Rate Code
Calendar			Payment Type
				Vendor


			Trigger
  			||
  			\/
			Pipeline
	Delete Activity ---> Script Activity/StoredProcedureActivity
		|			|
		|			|
		\/			|
	Dataset (raw/taxi_zone)		|
		|			|
		\/			\/
	Linked Service		Linked Service
		|			|
		\/			\/
	Storage Account		Serverless SQL Pool



Synapse Pipeline components, Create Linked Service & Dataset
Create Pipeline- Delete&Script Activity

Dynamic Pipeline
Pipeline-Stored Procedure/Script Activity:

USE nyc_taxi_ldw
GO

CREATE OR ALTER PROCEDURE silver.usp_silver_taxi_zone
AS
BEGIN
  IF OBJECT_ID('silver.taxi_zone') IS NOT NULL
	DROP EXTERNAL TABLE silver.taxi_zone;

  CREATE EXTERNAL TABLE silver.taxi_zone
	WITH
	(
	  DATA_SOURCE = nyc_taxi_src,
	  LOCATION = 'silver/taxi_zone',
	  FILE_FORMAT = parquet_file_format
	)
  AS
  SELECT *
  FROM bronze.taxi_zone;

END;
Dedicated SQL POOL

- Create Pipeline dependencies using the "Execute Pipeline" Activity.
- Automated Triggers to automate the pipelines
- Types of triggers in Synapse (Schedule, Tumbling Window, Storage events, Custom events)




Dedicated SQL POOL VS SERVERLESS SQL POOL DIFFERENCES:
https://learn.microsoft.com/en-us/azure/synapse-analytics/sql/overview-features

T-SQL's OPENROWSET to query multiple files or folders:
https://learn.microsoft.com/en-us/azure/synapse-analytics/sql/query-data-storage#query-multiple-files-or-folders

T-SQL's OPENROWSET to query parquet files:, query multiple files folder etc
https://learn.microsoft.com/en-us/azure/synapse-analytics/sql/query-data-storage#query-parquet-files

logical migration of dedicated sql pool:
https://techcommunity.microsoft.com/t5/azure-synapse-analytics-blog/what-s-the-difference-between-azure-synapse-formerly-sql-dw-and/ba-p/3597772


When the data is ready for complex analysis, dedicated SQL pool uses PolyBase to query the big data stores. PolyBase uses standard T-SQL queries to bring the data into dedicated SQL pool (formerly SQL DW) tables.